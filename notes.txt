Angular
    Framework for building Rich Internet Applications (RIA)

    Application = composition of components
        Component = represents on aspect of the UI
                  = encapsulation of Presentation + UI Behavior + State
                  = Reusable
                  = Maintainable
                  = Autmatically synchronizes the state changes with the presentation

                  Mail in GMail
                    State = data (Sender, Subject, Body, Sent Date, Read/Unread, Important/Unimportant)
                    Presentation = HTML & CSS
                    UI Behavior = User Interaction

    Angular Building Blocks
        - Component
        - Directives
            Low level DOM Manipulation
            Types of Directives
                - attribute directive
                    used by enclosing the directive within [] (ex., ngClass)
                    Manipulate the attributes of an existing dom node
                    DO NOT change the structure of the dom tree (by neither adding nor removing dom nodes)
                - structural directive
                    used by prefixing the directive name with '*'
                    CHANGES the structure of the dom tree (by adding new dom nodes or removing existing dom nodes)
                

        - Pipe
            Data transformation for presentation
        - Services
            NON UI logic
        - Module
            Directory of application entities (components, pipes, directives & services)
            Dependency Injection
            Minimum of one module
            A module acts as the starting point of the application


    Typescript is a superset of JavaScript
        Built to overcome the limitation of JavaScript
        JavaScript is loosely typed

            int x;
            .
            .
            x = "abc"

            var x;
            x = 10
            x = 'abc'
            x = true
            x = {}

            public static class Calculator{
                public static int add(int x, int y) int {
                    return x + y;
                }
            }


            function add(x, y){
                if (typeof x !== 'number', typeof y !== 'number')
                    throw new Error('Invalid argument(s)');
                return x + y;
            }

            add(10,20)
            add('asfdasd', 'asdfds')

            function add(x : number, y : number) : number {
                return x + y;
            }
            add(10, 'abc')

                |
                |
                V
                tsc
                |
                |
                V

            function add(x , y ) {
                return x + y;
            }

            Classes
            Arrow functions
            Interfaces
            Enums

            ES6 (ECMAScript 6 / ESNext / ES2015)
            1. let
            2. const
            3. Array destructuring
            4. Rest operator (Array)
            5. Spread operator (Array)
            6. Object destructuring
            7. Rest operator (Object)
            8. Spread operator (Object)
            9. default arguments
            10. arrow functions
            11. template strings
            12. object construction enhancement
            13. Iterators
            14. classes

            
var products = [
	{id : 5, name : 'Pen', cost : 60, units : 30, category : 'stationary'},
	{id : 8, name : 'Len', cost : 70, units : 60, category : 'grocery'},
	{id : 3, name : 'Ten', cost : 80, units : 40, category : 'stationary'},
	{id : 6, name : 'Ken', cost : 40, units : 50, category : 'grocery'},
	{id : 4, name : 'Den', cost : 90, units : 20, category : 'stationary'},
]

1. Display all the stationary products (filter)
        products.filter(product => product.category === 'stationary')

2. Find the cheapest product cost (reduce)
        products.reduce((result, product) => result < product.cost ? result : product.cost, Number.MAX_VALUE)

3. Find the overall value of the products (sum of (cost * units)) (reduce)
        products.reduce((result, product) => result + (product.cost * product.units), 0)

4. Apply a discount of 10% to the products cost and display the updated products (map, forEach)
    products
        .map(product => ({...product, cost : product.cost * 0.9}))
        .forEach(console.log)

5. Sort the products by units and display them (sort)
    console.table(products.sort((p1, p2) => p1.units - p2.units));

Requirements
1. Visual Studio Code
2. Chrome Browser
3. Node.js
    node --version

Node.js
    Runtime for JS tools that are used for building angular applications

Angular CLI
    npm install @angular/cli  -g
    

ES6 Modules
    Anything defined in JS/TS files is considered private to that file
    Any public entity has to explicitly exported
    Any entity from other JS/TS file has to be explicitly imported
    

Pure Function
    The invocation of the function can be replaced with the result of the function.
    
Observables
    Observables = Inverse of Enumerables
        Enumberables = Iterables with lazy evluation
        Iterable


var nos = [3,1,4,2,5]
for(let index = 0, count nos.length; index < count; index++){
    console.log(nos[index]);
}

PG
Min 5 yrs exp
Bangalore

recruit 30 engineers

3000 resumes

1 for 10

filter 300 resumes out of the 3000 received

Enumerable = collection that already has the data
Observable = collection that WILL GET THE DATA in future

Keyboard, mouse (Series)
Timer (Series)
Ajax (Singular)
Server Sent Events (Series)
Web Sockets (Series)

Array
    filter
    map
    reduce
    forEach

Operators
    observable -> filter -> observable

Rx.NET (Reactive Extension)
Rxjs

HttpClient (HttpClientModule - @angular/common/http)

Create a projects-tracker
    Load the projects
    List the projects
    Add new projects
        